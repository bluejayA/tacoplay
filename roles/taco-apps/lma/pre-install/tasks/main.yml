---
- name: Update max_map_count for elasticsearch
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^vm.max_map_count='
    line: vm.max_map_count=262144
  register: stat_kernel_var
  delegate_to: "{{ item }}"
  with_items: "{{ groups['taco'] }}"
  when:
  - es_update_kernel_var

- name: Insert max_map_count for elasticsearch
  lineinfile:
    path: /etc/sysctl.conf
    state: present
    line: vm.max_map_count=262144
  delegate_to: "{{ item }}"
  with_items: "{{ groups['taco'] }}"
  when:
  - es_update_kernel_var
  - not stat_kernel_var

- name: Apply max_map_count for elasticsearch
  sysctl:
    name: vm.max_map_count
    value: '262144'
    reload: yes
  delegate_to: "{{ item }}"
  with_items: "{{ groups['taco'] }}"
  when:
  - es_update_kernel_var

- name: Check if etcd cert directory exists
  stat:
    path: "{{ etcd_cert_dir }}"
  register: stat_etcd_dir
  when:
  - create_etcd_secret
  delegate_to: "{{ groups['kube_control_plane']|first }}"
  run_once: true

- name: Fail if etcd directory does not exist
  fail:
    msg: "Error! etcd cert directory does not exist"
  when:
  - create_etcd_secret
  - stat_etcd_dir.stat.exists == False
  delegate_to: "{{ groups['kube_control_plane']|first }}"
  run_once: true

- name: Check if namespace exists
  shell: | 
    {{ bin_dir }}/kubectl --kubeconfig /etc/kubernetes/admin.conf get namespace | grep {{ lma_namespace }} | wc -l
  register: is_namespace_existing
  ignore_errors: yes
  when:
  - create_etcd_secret
  delegate_to: "{{ groups['kube_control_plane']|first }}"
  run_once: true

- name: Create namespace for lma
  command: >-
    {{ bin_dir }}/kubectl --kubeconfig /etc/kubernetes/admin.conf create namespace {{ lma_namespace }}
  register: namespace_result
  when:
  - create_etcd_secret
  - is_namespace_existing.stdout == "0"
  delegate_to: "{{ groups['kube_control_plane']|first }}"
  run_once: true

- name: Labeling namespace for lma
  command: >-
    {{ bin_dir }}/kubectl --kubeconfig /etc/kubernetes/admin.conf label namespace {{ lma_namespace }} name={{ lma_namespace }} --overwrite
  register: label_namespace_result
  when:
  - create_etcd_secret
  delegate_to: "{{ groups['kube_control_plane']|first }}"
  run_once: true

- name: Check if secret exists
  shell: | 
    {{ bin_dir }}/kubectl --kubeconfig /etc/kubernetes/admin.conf get secret --namespace {{ lma_namespace }} | grep etcd-client-cert | wc -l
  register: is_secret_existing
  ignore_errors: yes
  when:
  - create_etcd_secret
  delegate_to: "{{ groups['kube_control_plane']|first }}"
  run_once: true

- name: Create Secret for etcd monitoring
  command: >-
    {{ bin_dir }}/kubectl --kubeconfig /etc/kubernetes/admin.conf create secret generic etcd-client-cert
    --from-file=etcd-ca={{ etcd_cert_dir }}/ca.pem
    --from-file=etcd-client={{ etcd_cert_dir }}/member-{{ groups['kube_control_plane']|first }}.pem 
    --from-file=etcd-client-key={{ etcd_cert_dir }}/member-{{ groups['kube_control_plane']|first }}-key.pem 
    --namespace {{ lma_namespace }}
  register: secret_result
  when:
  - create_etcd_secret
  - is_secret_existing.stdout == "0"
  delegate_to: "{{ groups['kube_control_plane']|first }}"
  run_once: true

- name: Remove etcd log file
  file:
    path: "/var/log/etcd.log"
    state: absent
  delegate_to: "{{ item }}"
  with_items: "{{ groups['etcd'] }}"
  ignore_errors: true

# TODO: check if these tasks should be replaced for host-type etcd
#- name: Get file paths for etcd container
#  shell: "ls /var/lib/docker/containers/`sudo docker ps | grep etcd | awk '{print $1}'`*/*json.log"
#  register: "etcd_files"
#  delegate_to: "{{ item }}"
#  with_items: "{{ groups['etcd'] }}"
#
#- name: Create etcd log file
#  file:
#    src: "{{ item[1].stdout }}"
#    path: "/var/log/etcd.log"
#    state: "link"
#  delegate_to: "{{ item[0] }}"
#  with_together:
#  - "{{ groups['etcd'] }}"
#  - "{{ etcd_files.results }}"
#
